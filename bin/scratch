#!/usr/bin/env ruby

$:.unshift File.join(File.dirname(__FILE__),'..') 
require 'lib/require'
include GLI::App

version VERSION
program_desc 'A tool to make and manage backups for multiple data sources'

desc 'Be verbose'
switch [:v,:verbose]

pre do |global_options,command,options,args|
  Log.setup
  Log.be_verbose if global_options[:v]
  true
end

collection_args_desc = '[COLLECTION_PATH] [JOB_NAME]...'

desc 'Make backups'
arg_name collection_args_desc
command :backup do |b|
  b.switch :f, :force, :desc => 'Make backups even if not yet needed'
  b.action do |gopts, opts, args|
    collection = Collection.new(args)
    opts[:force] ? collection.backup : collection.try_backup
  end
end

desc 'Delete stale backups to conserve space'
arg_name collection_args_desc
command :prune do |b|
  b.switch :p, :pretend, :desc => <<-DOC.flatten
    Don't actually delete any files. Just show what prune would do.
    DOC
  b.action do |gopts, opts, args|
    collection = Collection.new(args)
    collection.prune(opts)
  end
end

desc 'Show information about backups'
arg_name collection_args_desc
command :report do |b|
  b.switch :q, :quick, :desc => <<-DOC.flatten
    Save time by skipping the calculation of directory sizes
    DOC
  b.switch :u, :disk_usage, :desc => <<-DOC.flatten
    Report total disk usage
  DOC
  b.action do |gopts, opts, args|
    collection = Collection.new(args)
    collection.report(opts)
  end
end

desc <<-MSG.flatten
  Brings the remote collection in sync with the local collection by copying
  files from local to remote and pruning the remote collection as needed. This
  process does not make new backups. 
  MSG
arg_name collection_args_desc
command :sync do |b|
  b.action do |gopts, opts, args|
    collection = Collection.new(args)
    collection.sync(opts)
  end
end

exit run(ARGV)

